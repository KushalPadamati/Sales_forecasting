## Step1: Business Problem Understanding
# Identifying the relation between sales and advertisements
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

## Step2: Data Understanding
# 2.1 Data Collection
df=pd.read_csv("Advertising.csv")
df.head()

df.info()

#If someone was to spend a total of $200,000, what would the expected sales be?
# we have simplified this quite a bit by combining all the features into "total spend"
df['total_spend']=df['TV']+df['radio']+df['newspaper']
df.head()

## Step3: Data Preprocessing
#3.1 EDA
#On the basis of this data, how should you spend advertising money in the future?
1. Is there a relationship between ads and sales?
2. How strong is that relationship
3. Given Add's spending, can sales be predicted?

df.describe()

sns.pairplot(df)
plt.show()

df.corr()

#3.2 Data Cleaning
df.isnull().sum()

#3.3 Data Wangling
 #no encoding requied

#3.4 Train-Test Split
X= df.drop(columns='sales')
y= df['sales']

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=42)

Step4: Modelling
from sklearn.linear_model import LinearRegression
model=LinearRegresion()
model.fit(X_train,y_train)

model.intercept_

model.coef_

#Prediction
train_predictions=model.predict(X_train)
test_predicttions=model.predict(X_test)

# Step5: Evalution
from sklearn.metrics import mean_absolute_error
print('MAE for test data:", mean_absolute_error(y_test,test_predictions))
print('MAE for train data:", mean_absolute_error(y_train,train_predictions))

from sklearn.metrics import mean_squared_error
print('MSE for test data:',mean_squared_error(y_test,test_predictions))
print('MSE for train data:',mean_squared_error(y_train,train_predictions))
print('RMSE for test data:',np.sqrt(mean_squared_error(y_test,test_predictions)))
print('RMSE for train data:',np.sqrt(mean_squared_error(y_train,train_predictions)))

from sklearn.metrics import r2_score
print('R2 for test data:',r2_score(y_test,test_predictions))
print('R2 for train data:',r2_score(y_train,train_predictions))

model.score(X_test,y_test) # Test R-Square
model.score(X_train,y_train) # Train R-Square

#Checklist
1. is model has underfitting or over fitting problem?
Ans: Its a good model.
2. Is Test Accuracy=Cross validation Score?
from sklearn.model_selection import cross_val_score
scores=cross_val_score(model,X,y,cv=5)
print(scores)
cv_score = scores.mean()
print('Cross Validation Score:',cv_score)

# Check for Assumptions
1. Linearity of Errors
test_res=y_test-test_predictions
plt.scatter(y test,test res)
plt.xlabel('observed_values')
plt.ylabel('fitted_values')
plt.show()
2.Normality of Errors
sns.displot(test_res,kde=True)
plt.show()
3. Equal variance of Erros(Homoscadesicity)
plt.scatter(test_predictions,test_res,c='r')
plt.axhline(y=0,color='blue')
plt.xlabel('fitted_values')
plt.ylabel('residuals')
plt.show()
4.Variable Significance
import statsmodels.formula.api as smf
model2=smf.ols('y~X',data=df).fit()
model2.summary()

Step6:Final Inferences
Our next campaign will have a total spend of 200k on Ads, how many units could we expect to sell as a results of this?
# use the model to make predictions on a new value
model.predict([[321499]])

Save a Model
from joblib import dump
dump(model,'sales_model.joblib')

Load a model
from joblib import load
loaded_model.predict([[200000]])


